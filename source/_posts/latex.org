#+TITLE:       LaTex
#+AUTHOR:      kyle Three Stone
#+DATE:        <2018-05-24 Thu>
#+EMAIL:       kyleemail@163.com
#+OPTIONS:     H:3 num:t toc:t \n:nil @:t ::t |:t ^:t f:t tex:t
#+TAGS:        LaTex
#+CATEGORIES:  LaTex




\(\LaTeX\) 是一个文档准备系统 (Document Preparing System)，它非常适用于生成高印刷质量的科技类和数学
类文档。它也能够生成所有其他种类的文档，小到简单的信件，大到完整的书籍。 \(\LaTeX\) 使用 \(\TeX\) 作
为它的排版引擎。

\(\TeX\) 是高德纳 (Donald E.Knuth)开发的、以排版文字和数学公式为目的的一个计算机软件。高德纳从 1977
年开始开发 \(\TeX\) ，以发掘当时开始用于出版工业的数字印刷设备的潜力。正在编写著作《计算机程序设计艺
术》的高德纳，意图扭转排版质量每况愈下的状况，以免影响他的出书。我们现在使用的 \(\TeX\) 排版引擎发布
于 1982 年，在 1989 年又稍加改进以更好地支持 8-bit 字符和多语言排版。\(\TeX\) 以其卓越的稳定性、跨平
台、几乎没有 Bug 而著称。1990 年推出 3.1 版, 并宣布不再更新 (只修正 bug)。\(\TeX\) 的版本号不断趋近
于 \(\pi\)，当前为 3.141592653。

\(\TeX\) 读作 "Tech" ，其中 "ch" 的发音类似于 "h" ，与汉字“泰赫”的发音类似。\(\TeX\) 的拼写来自希
腊词语 technique （技术） 的开头几个字母。在 ASCII 字符环境，\(\TeX\) 写作 TeX。\(\TeX\) 系统提供了
300 + 600 多条基本的排版命令。

\(\TeX\) 提供的命令都是一些很底层的命令, 普通用户使用起来不太方便；大牛们在 \(\TeX\) 基础上, 定义新的命令, 为普通用户排版提供方便
+ Plain TEX : 由 Knuth 开发, 新定义 600 多条命令, 是通常所说的 TEX
+ AMS-TEX : 由美国数学会开发, 适合排版各种复杂的数学公式
+ LATEX (1984) : 由 Lamport 开发, 适合论文书籍, 对 TeX 推广贡献巨大
+ pdfTEX (1997): 由 H.T. Thanh 开发, 直接输出 PDF, 支持多种图片格式
+ xeTEX (2005): 由 J. Kew 开发, 支持 Unicode, 可直接访问操作系统字体
+ LuaTEX (2007): 由 T. Hoekwater 开发, 是 Lua 脚本语言和 TeX 的结合

\(\LaTeX\) 为 \(\TeX\) 基础上的一套格式，令作者能够使用预定义的专业格式以较高质量排版和印刷他们的作
品。 \(\LaTeX\) 的最初开发者为 Leslie Lamport 博士。 \(\LaTeX\) 使用 \(\TeX\) 程序作为自己的排版引擎。
当下 \(\LaTeX\) 主要的维护者为 Frank Mittelbach。\(\LaTeX\) 依赖的 \(\TeX\) 排版引擎和其它软件是跨平
台、免费、开源的。但相比于其他程序设计语言排查错误困难，虽然能够提示错误，但不提供调试的机制，有时错
误提示还很难理解。

\(\LaTeX\) 读作 “Lah-tech” 或者 “Lay-tech” ，近似于汉字“拉泰赫”或“雷泰赫”。 \(\LaTeX\) 在
ASCII 字符环境写作 LaTeX。当前的 \(\LaTeX\) 版本为 \(\LaTeX2_\varepsilon\)，意思是超出了第二版，接近
但没达到第三版，在 ASCII 字符环境写作 LaTeX2e。


** LaTeX 源代码结构

#+BEGIN_SRC latex
% LATEX 源代码以一个 \documentclass 命令作为开头，
% 它规定了文档使用的文档类 (论文, 书籍, 幻灯片, 海报) ，必须且只能选择一种
\documentclass[options]{class-name}

% 导言区，在 \documentclass 和 \begin{document} 之间的位置称为导言区，
% 使用 \usepackage调用宏包，也可以使用命令对文档进行全局设置。
% 放在导言区的命令对整个文档都生效。
% 当然也可以什么都不写，一个宏包都不调用。一切视自己需求。
\usepackage{...}

% 再接着，我们需要用以下一对命令来标记正文内容的开始位置和结束位置，而将正文内容写入其中：
\begin{document}
% 正文部分
...
\end{document} % 结束
#+END_SRC

*每个宏包和文档类都是带特定扩展名的文件。* XXX.sty 宏包文件。宏包的名称就是去掉扩展名的文件名；
XXX.cls 文档类文件，同样，文档类名称就是文件名；XXX.bib BIBTEX 参考文献数据库文件；XXX.bst BIBTEX 用
到的参考文献格式模板。

*** 文档类
*LATEX 源代码的开头须用 \documentclass 指定文档类。* 文档类规定了 LATEX 源代码所要生成的文档的性质：
普通文章、书籍、演示文稿、个人简历等等。

#+BEGIN_SRC latex
\documentclass[options]{class-name}
#+END_SRC

其中 class-name 为文档类的名称，如 LATEX 提供的 article（文章格式的文档类，广泛用于科技论文、报告、
说明文档等）, book（书籍文档类，包含章节结构和前言、正文、后记等结构）, report（长篇报告格式的文档类，
具有章节结构，用于综述、长篇论文、简单的书籍等）[这三个习惯上称为“标准文档类”]，在其基础上派生的一
些文档类如支持中文排版的 ctexart，ctexbook， ctexrep，或者有其它功能的一些文档类，如 moderncv ，
beamer 等。

可选参数 options 为文档类指定选项，以全局地影响文档布局的参数，如字号、纸张大小、单双面等等。LATEX
的三个标准文档类可指定的选项

| option                                                            | 含义                                                                                                |
|-------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------|
| 10pt, 11pt, 12pt                                                  | 指定文档的基本字号；缺省为 10pt                                                                     |
| a4paper, letterpaper, a5paper, b5paper, execuivepaper, legalpaper | 指定纸张大小；默认为美式纸张 letterpaper                                                            |
| fleqn                                                             | 行间公式左对齐；缺省居中                                                                            |
| leqno                                                             | 将公式编号方在左侧；缺省为右侧                                                                      |
| titlepage, notitlepage                                            | 指定标题命令 \maketitle 是否生成单独标题页；缺省：article:notitlepage; report,book:titilepage       |
| onecolumn, twocolumn                                              | 指定单栏/双栏排版                                                                                   |
| twoside, oneside                                                  | 指定单面/双面排版，双面排版时，奇偶页的页眉、页脚、页边距不同；缺省：article,report:单面; book:双面 |
| landscape                                                         | 指定横向排版；缺省为纵向                                                                            |
| openright, openany                                                | 指定新的一章 \chapter 是在奇数页开始，还是直接紧跟上一页开头；缺省：report:openany; book:openright  |

*** 宏包
在编写 LATEX 源代码时，你时常会发现 LATEX 的基础功能不能满足你的需求，比如排版复杂的表格、插入图片、
增加颜色甚至超链接等等。这时你需要依赖一些扩展来增强或补充 LATEX的功能。这些扩展称为宏包。调用宏包的
方法非常类似调用文档类的方法：

#+BEGIN_SRC latex
\usepackage[options]{package-name}
#+END_SRC

在使用宏包和文档类之前，一定要首先确认它们是否安装在你的计算机中，否则 \usepackage 等命令会报错误。
每个宏包（包括前面所说的文档类）都定义了许多命令和环境，或者修改了 LATEX 已有的命令和环境。查看帮助
在使用命令：

#+BEGIN_SRC shell
texdoc pkg-name
#+END_SRC

其中 pkg-name 是宏包或者文档类的名称，此时会直接打开一个相应的 PDF 文档供查阅。

** 文件的组织方式
当编写较大规模的 LATEX 源代码，如书籍、毕业论文等，将源代码分成若干个文件而不是写到一堆，比如很自然
地每章写一个文件。LATEX 提供了命令 \include 用来在源代码里插入文件：

#+BEGIN_SRC latex
\include{filename}
\include{chapters/a.tex} % 相对路径
\include{/home/Bob/file.tex} % Linux 绝对路径
\include{D:/file.tex} % Windows 绝对路径
#+END_SRC

filename 为文件名，如果和要编译的主文件不在一个目录中，则要加上相对或绝对路径，例如：filename 可以不
带扩展名，此时默认为 .tex；其它文件必须带扩展名。值得注意的是 \include 在读入 filename 之前会另起一
页。有的时候我们并不需要这样，而是用 \input 命令，它纯粹是把文件里的内容插入：

#+BEGIN_SRC latex
\input{filename}
#+END_SRC

另外 LATEX 提供了一个 \includeonly 命令来组织文件，用于导言区，指定只载入某些文件：

#+BEGIN_SRC latex
\includeonly{filename1,filename2,...}
#+END_SRC



** LaTeX 命令
*LATEX 的源代码本质上是文本文件。* 除了文字本身， LATEX 源代码之中还包括大量的命令，用在排版公式、划
分文档结构、控制样式等等不同的地方。LATEX 命令以反斜线 \ 开头，对大小写敏感。命令有两种形式

+ 反斜线和后面的一串字母，如 \LaTeX 。它们以任意非字母符号（空格、数字、标点等）作为分隔符
+ 反斜线和后面的一个非字母符号，如 \$ 。它们无需分隔符

大多数的 LATEX 命令带一个或多个参数，每个参数用花括号 { } 包裹。有些命令带一个或多个可选参数，以方括
号 [ ] 包裹。还有些命令在命令名称后可以带一个星号 *，带星号和不带星号的命令效果有一定差异。

#+BEGIN_SRC latex
% 定义新命令
\newcommand{新命令}{命令内容}
% 重新定义已有命令
\renewcommand{已有命令}{命令内容}

\newcommand{\eps}{\varepsilon} % \(\eps\) 就可生成该符号
#+END_SRC

** LaTeX 环境
LATEX 还引入了环境的用法，用以令一些效果在局部生效，或是生成特定的文档元素。环境允许嵌套使用。LATEX
环境的用法为一对命令 

#+BEGIN_SRC latex
\begin{environment name}[options]{arguments}
. . .
\end{environment name}
#+END_SRC

其中 environment name 为环境名， \begin 和 \end 中填写的环境名应当一致。 \begin 在 environment name
后可以带一个或多个参数，甚至可选参数。具有特定格式的内容需要放在相应的环境中, 如表格, 数学公式等。

document 是 LATEX 的一个最基本的环境，一篇文档有且只能有一个 document 环境，正文的所有内容都必须放在
document 环境中。

自定义环境
#+BEGIN_SRC latex
\newenvironment{name}[num]{before}{after}
#+END_SRC

\newenvironment 命令有一个可选的参数。在 before 中的内容将在此环境包含的文本之前处理，而在 after
中的内容将在遇到 \end{name} 命令时处理。

#+BEGIN_SRC latex
\newenvironment{king}
{\rule{1ex}{1ex}%
      \hspace{\stretch{1}}}
{\hspace{\stretch{1}}%
       \rule{1ex}{1ex}}

\begin{king}
My humble subjects \ldots
\end{king}
#+END_SRC

*** 分组
除了 LATEX 环境之外，花括号本身也起到分组的作用，起到类似环境的令效果在局部生效的作用。{ } 称为一个
分组。

有些命令只对其参数起作用, 如 \textbf{abc} ；有些命令对后面所有的内容都起作用, 这些命令通常也称为声明,
如 \bfseries ，可以利用分组来限制声明的作用范围

#+BEGIN_SRC latex
This is \textbf{bold face} style.\\
This is \bfseries bold face style.\\
This is {\bfseries bold face} style.
#+END_SRC

** LaTeX 编译

+ 引擎：全称为排版引擎，是读入源代码并编译生成文档的程序，如 pdfTeX、XeLaTeX 等，有时也直接称为编译器
+ 格式：定义了一组命令的代码集。 LATEX 就是最广泛应用的一个格式，高德纳本人编写的 plain TEX 格式
+ 命令：是引擎和格式二者的结合体。如 pdflatex 命令是结合 pdfTEX 引擎和 LATEX 格式的一个命令
latex 命令和 LATEX 格式往往容易混淆。xelatex 命令有着各种新的特性，如能够直接支持使用系统预装的字体、
原生支持 UTF-8 编码等。尤其是排版中文， xelatex 命令配合适当的宏包是现在最新、最方便的方式。可以直接
生成 PDF 文档。

*复杂的 LATEX 源代码可能要编译多次* ：先编译生成辅助文件，然后再次编译时读入辅助文件得到正确的结果。
LATEX 在编译过程中生成相当多的辅助文件和日志。一些功能如交叉引用、参考文献、目录、索引等需要多次编译。

| .log | 排版引擎生成的日志文件，供排查错误使用                       |
| .aux | LATEX 生成的主辅助文件，记录交叉引用、目录、参考文献的引用等 |
| .toc | LATEX 生成的目录记录文件                                     |
| .lof | LATEX 生成的图片目录记录文件                                 |
| .lot | LATEX 生成的表格目录记录文件                                 |
| .bbl | BIBTEX 生成的参考文献记录文件                                |
| .blg | BIBTEX 生成的日志文件                                        |
| .idx | LATEX 生成的供 makeindex 处理的索引记录文件                  |
| .ind | makeindex 处理 .idx 生成的格式化索引记录文件                 |
| .ilg | makeindex 生成的日志文件                                     |
| .out | hyperref 宏包生成的 PDF 书签记录文件                         |


工具宏包 syntonly 用于调试。加载这个宏包后，在导言区使用 \syntaxonly 命令，可令 LATEX 编译后不生成
DVI 或者 PDF 文档，只排查错误，编译速度会快不少：

#+BEGIN_SRC latex
\usepackage{syntonly}
\syntaxonly
#+END_SRC

如果想生成文档，则将 \syntaxonly 命令那一行用 % 注释掉即可。

*** 建议
+ 中文和英文之间, 中文与数学公式之间 -- 用空格隔开
+ 各种环境的开始和结束 -- 独占一行
+ 自然分段 -- 建议使用一个空行
+ 自然换行 -- 慎用强制换行 “\\”
+ 标点符号一致 -- 全部采用中文标点, 或者全部采用英文标点
+ 数学公式中的标点 -- 必须用英文标点

*** 错误排查

当我们用排版引擎编译 LATEX 代码时，终端会显示大量信息（TEXworks等编辑器会有一个区域显示这些信息）。
当编译过程中出现错误时，信息将会停止在出错的地方，等待我们接下来的操作。比如说我们有一个明显出错的例
子：

#+BEGIN_SRC latex
\documentclass{article}
\begin{document}
Test \LaTEx{} and it’s friends.
\end{document}
#+END_SRC

编译过程中遇到这个错误将会停顿下来，提示错误，并等待用户输入指令：

#+BEGIN_SRC shell
! Undefined control sequence.
l.3 Test \LaTEx
{} and it’s friends.
#+END_SRC

这种错误信息分两部分，前一部分提示了 *错误的信息* ，后一部分指出了 *错误发生的行号* ，以及通过 *错落
的文字* 告知发生错误的命令所在位置。如上错误显示 \LaTEx 位置发生了错误，错误信息是“未定义的控制序
列”，意思是 \LaTEx 是 TEX 编译器无法识别的一个命令，很显然是我们把 \LaTeX 的大小写写错了。

*错误处理方法：* 出现错误时，编译过程将暂停，等待用户输入命令。用户可以直接敲回车跳过当前的错误，继
续编译，相当于丢掉了写错的命令，将 “Test and it’s friends.’’ 排版出来。但这个例子过于简单，有些
复杂的代码中，有可能会由于一个小问题导致一连串的错误。此时可以选择按 S/R/Q 选择跳过接下来的所有错误，
或者按 X 直接退出编译，将源代码中的错误修改后重新编译。

| 回车  | 丢弃错误的命令     |
| S/R/Q | 跳过下面的所有错误 |
| X     | 中止编译           |

*常见错误：*
+ ! Undefined control sequences.
  + 使用了未定义的命令。拼写错误是原因之一，如把 \LaTeX 写作 \Latex 这样。也有可能是没有调用某个宏包，
    但用了该宏包定义的命令。
+ ! LaTeX error: Environment ... undefined.
  + 使用了未定义的环境。
+ ! Missing $ inserted.
  + 缺少数学环境的符号 $。多由于将数学符号用在公式之外而导致。
+ Runaway argument?
+ ! Paragraph ended before ... was complete.
+ ! File ended while scanning definition/use of ...
  + 这两个错误主要是由于漏写了包裹命令参数的花括号，导致识别参数时出现错误。许多编辑器的括号配对功能
    有助于检查和消除这类错误。这类错误还有可能是由于前一次编译中断导致 .aux 等辅助文件不完整，再次编
    译读入不完整的文件产生错误。解决办法是删除辅助文件并重新编译。
+ ! Extra alignment tab has been changed to \cr.
+ ! Misplaced \noalign. 
  + 两个错误信息都与表格有关。前者的字面意义是“一行中使用的列分隔符 & 太多”，有时可能确实是 & 的个
    数和列格式不匹配，但多数情况是漏掉了行尾的 \\ 命令。后者常出现于漏掉了行尾的 \\ 命令而接着使用
    \hline 命令画横线的时候。
+ ! LaTeX Error: Lonely \item--perhaps a missing list environment.
+ ! LaTeX Error: Something’s wrong--perhaps a missing \item.
  + 两个错误信息都与列表环境和 \item 命令有关。前者意味着在没有使用列表环境的情况下用了 \item；后者
    则相反，是在列表环境中漏了 \item。
+ ! I can’t find file ‘...’.
+ ! LaTeX Error: File ‘...’ not found.
  + 两个错误都意味着缺少文件。如果使用 \input 或者 \include 命令添加文件，出现上述错误的原因当然是文
    件不存在或者文件名不对；如果错误提示里的文件名带 .cls 或者 .sty 扩展名，那么很显然，是因为没有安
    装所需的宏包或文档类。
+ ! LaTeX Error: Missing \begin{document}.
  + 字面上是缺少 \begin{document}，实际上往往是由于在 \begin{document} 之前（导言区）输入了文字或某
    些命令。
+ ! LaTeX Error: Cam be used only in preamble.
  + 与上一条相反，由于将必须用于导言区的命令在 \begin{document} 之后使用而产生。
+ ! LaTeX Error: \beginn{...} on input line ... ended by \end{...}.
  + 环境首尾不匹配。比如 \begin{enumerate} 用了 \end{itemize} 结尾。或者也可能是由于漏写了 \begin 或
    者 \end 命令。
+ ! LaTeX Error: Option clash for package ‘...’.
  + 以不同选项重复调用宏包造成冲突。有可能是因为其它宏包内部事先调用了这个宏包，用户再次带选项调用而
    导致冲突。解决问题的办法是去掉重复调用的宏包。如果宏包允许的话，尽量使用其定义的命令改变设置，减
    少宏包选项的使用。
+ ! LaTeX Error: Command ... already defined, or name \end... illegal ...
  + 使用 \newcommand 或 \newenvironment 定义已有的命令/环境时产生的错误。如果自己确实作了定义，可考
    虑用 \renewcommand 或 \renewenvironment 定义；如果是宏包定义的命令产生了这个错误，则属于隐性的宏
    包冲突。相比之前的 “Option Clash”，隐性宏包冲突是更难以解决的问题，对各种宏包不熟悉的用户，尤
    其是使用模板的用户而言，往往难以下手。用户可尝试查找引起冲突的宏包的帮助手册。 *详尽的手册里通常
    会告知用户这个宏包应当在某个宏包的前面/后面调用，或者不能与某个宏包一起调用。* 如果是模板调用了
    大量宏包导致冲突，可联系模板的作者解决。
+ ! LaTeX Error: Unknown option ‘...’ for package ‘...’.
  + 调用宏包时指定了不能被其识别的选项。此时应该查找宏包的帮助文档来解决问题。
+ ! Package ‘...’ error: ...
  + 宏包或文档类自定义的错误，由于不正确地使用宏包里的命令而导致。此时应该查找宏包的帮助文档来解决问
    题。


** 排版中文
latex 命令及 pdflatex 命令下可以使用 inputenc 宏包支持 UTF-8：

#+BEGIN_SRC latex
\usepackage[utf8]{inputenc}
\usepackage[latin1]{inputenc} % 西欧语言的 Latin-1
% 这些编码的处理由 inputenc 宏包支持
#+END_SRC

xelatex 命令原生支持 UTF-8 编码，而且也不适用 inputenc 宏包。将 .tex 源代码保存为UTF-8 编码，并借助
fontspec 宏包调用适当的字体，就可以在源代码中输入任意语言的文字。但各个语言（印地语、阿拉伯语等）的
特殊排版要求需要更多的宏包支持，如babel、 polyglossia 等。

*** xeCJK 宏包
用 LATEX 排版中文的一大难题是中文字体的处理。 TEX 使用的字体格式仅支持不超过 256个字符，旧式的中文排
版方案如 CJK 宏包往往需要复杂的预处理，将中文字体拆分成数百个小字体，非常麻烦。

xelatex 命令支持直接使用系统安装的 TrueType (.ttf) / OpenType (.otf) 等格式的字体，加上对 UTF-8 编码
的原生支持，免去了预处理字体的麻烦。在此基础上的 xeCJK 宏包更进一步完善了排版中文的一些细节，比如中
英文之间插入空隙、中文行尾的回车不引入空格、标点符号不出现在行首，等等。

xeCJK 宏包支持用简单的命令配置中文字体。举一个在 Windows 下使用 xeCJK 的例子，源代码须保存为 UTF-8
编码，并使用 xelatex 命令编译：

#+BEGIN_SRC latex
\documentclass{article}
\usepackage{xeCJK}
\setCJKmainfont{SimSun}
\begin{document}
中文LaTeX排版。
\end{document}
#+END_SRC

*** ctex 宏包和文档类
ctex 宏包和文档类是对 CJK 和 xeCJK 等宏包的进一步封装。 ctex 文档类包括 ctexart / ctexrep / ctexbook，
是对 LATEX 的三个标准文档类的封装，对 LATEX 的排版样式做了许多调整，以切合中文排版风格。最新版本的
ctex 宏包/文档类甚至支持自动配置字体。比如上述例子可进一步简化为：

#+BEGIN_SRC latex
\documentclass{ctexart}
\begin{document}
中文LaTeX排版。
\end{document}
#+END_SRC

ctex 宏包/文档类支持源代码保存为 UTF-8 和 GBK 编码，用 latex + dvipdfmx 命令、pdflatex 或 xelatex 命
令（只支持 UTF-8 编码）都能够编译。笔者建议在使用 ctex 宏包和文档类时总是将源代码保存为 UTF-8 编码，
用 xelatex 命令编译。

** LATEX 中的字符

LATEX 源代码中，空格键和 Tab 键输入的空白字符视为“空格”。连续的若干个空白字符视为一个空格。一行开
头的空格忽略不计。行末的回车视为一个空格；但连续两个回车，也就是空行，会将文字分段。多个空行被视为一
个空行。也可以在行末使用 \par 命令分段。

LATEX 用 % 字符作为注释。在这个字符之后直到行末，所有的字符都被忽略，行末的回车也不引入空格。

LATEX 中有一些特殊字符 # $ % & { } _ ^ ~ \ ，这些字符在 LATEX 里有特殊用途，如 % 表示注释， $、 ^、
_ 等用于排版数学公式， & 用于排版表格。直接输入这些字符得不到对应的符号，还往往会出错。如果想要输入
以上符号，需要在前面加上带反斜线。\^ 和 \~ 两个命令是需要带参数的，如果不加一对花括号（空参数），就
将后面的字符作为参数，形成重音效果。

符号 < > | 被定义成数学符号，只能在数学模式中使用，想要在普通文本中输出需要使用命令 \textless
\textgreater \textbar

西文排版中经常会出现连字（Ligatures），常见的有 ff / fi / fl / ffi / ffl。

中文的标点符号（都是全角的非 ASCII 字符）一般来讲不用特别操心，只要使用中文输入法输入即可。而在英文
标点的输入上，有许多需要留意的地方。LATEX 的单引号 ‘ ’ 用 ‘ 和 ’ 输入；双引号 “ ” 用 ‘‘ 和
’’ 输入（虽然 " 也能表示双引号，但没有合适的单个符号用来表示前双引号，所以不常用在正文）；LATEX 中
有三种长度的“横线”可用：连字号、短破折号（en-dash）和长破折号（em-dash）。它们分别有不同的用途：连
字号 - 用来组成复合词；短破折号 -- 将数字连接表示范围；长破折号 --- 作为破折号使用；LATEX 提供了命令
\ldots 来生成省略号，相对于直接输入三个点的方式更为合理。 \ldots和 \dots 是两个等效的命令； 命令 \~
可以用来输入波浪号，但位置靠顶端，可能不甚理想。有的人可能喜欢用数学公式里的 \sim 符号来代替。

LATEX 支持用命令输入各种西欧语言的特殊符号和重音。

强调文字的方法，要么是添加一些下划线或者装饰物，要么是改变文字的字体。LATEX 定义了 \underline 命令用
来为文字添加下划线，\underline 命令生成下划线的样式比较机械，不同的单词可能生成高低各异的下划线，并
且无法换行。 ulem 宏包解决了这一问题，它提供的 \uline 命令能够轻松生成自动换行的下划线；\emph 命令用
来将文字变为斜体以示强调。如果在本身已经用 \emph 命令强调的文字内部嵌套使用 \emph，内部则使用正常字
体的文字。

** 断行和断页
LATEX 将文字段落在合适的位置进行断行，尽可能做到每行的宽度一致，并且单词间距匀称。文字段落和公式、图
表等内容从上到下顺序排布，并在合适的位置断页，分割成匀称的页面。在绝大多数时候，我们无需自己操心断行
和断页。但偶尔会遇到需要手工调整的地方。

如果我们确实需要手动断行，可使用如下命令：

#+BEGIN_SRC latex
\newline % 换行；只用于文本段落中
\\ % 在表格、公式等地方也用于分行

% 断页的命令有两个：
\newpage % 断页
\clearpage % 断页
% 通常情况下两个命令都能起到另起一页的作用，但有一些区别：一是在双栏排版中 \newpage
% 只起到另起一栏的作用；二是涉及到浮动体的排版上行为不同。

% 有时候我们不满足于 LATEX 默认的断行和断页位置，需要进行微调
\linebreak[n] 
\nolinebreak[n]
\pagebreak[n] 
\nopagebreak[n] 
% LATEX 哪些地方适合断页，哪些地方不适合：
% 以上命令都带一个可选参数，用数字 n 代表适合/不适合的程度，取值范围为 0-4，不带
% 可选参数时，缺省为 4。
% 以上命令适合给出优先考虑断行断页/禁止断行断页的位置，但不适合直接拿来断行或断页，
% 使用 \newline 或 \newpage 等是更好的选择。

#+END_SRC

如果 LATEX 遇到了很长的英文单词，仅在单词之间的位置断行无法生成宽度匀称的行时，就要考虑从单词中间断
开。对于绝大部分单词， LATEX 能够找到合适的断词位置，在断开的行尾加上连字符 -。如果一些单词没能自动
断词，我们可以在单词内手动使用 \- 命令指定断词的位置


** 文档元素

*** 交叉引用

章节、公式、图表、定理等位置都可以使用交叉引用。交叉引用是 LATEX 强大的自动排版功能的体现之一。在能
够被交叉引用的地方使用 \label 命令：\label{label-name} 之后可以在别处使用 \ref 或 \pageref 命令，分
别生成交叉引用的编号和页码：\ref{label-name} \pageref{label-name} 。为了生成正确的交叉引用，一般也需
要多次编译源代码。

#+BEGIN_SRC latex
% \label{xxx:xxx}
% \ref{xxx:xxx}
% \pageref{xxx:xxx}
A reference to this subsection \label{sec:this} looks like:
''see section~\ref{sec:this} on page~\pageref{sec:this}.''
#+END_SRC

\label 命令可用于记录各种类型的交叉引用，使用位置分别为：
+ 章节标题： 在章节标题命令 \section 等之后紧接着使用。
+ 行间公式： 单行公式在公式内任意位置使用；多行公式在每一行公式的任意位置使用。
+ 有序列表： 在 enumerate 环境的每个 \item 命令之后、下一个 \item 命令之前任意位置使用。
+ 图表标题： 在图表标题命令 \caption 之后紧接着使用。
+ 定理环境： 在定理环境内部任意位置使用。

在使用不记编号的命令形式（\section*、 \caption*、带可选参数的 \item 命令等）时不要使用 \label 命令，
否则生成的引用编号不正确。

*** 脚注

使用 \footnote 命令可以在页面底部生成一个脚注：\footnote{footnote}

#+BEGIN_SRC latex
“天地玄黄，宇宙洪荒。日月盈昃，辰宿列张。” \footnote{出自《千字文》}
#+END_SRC

有些情况下（比如在表格环境、各种盒子内）使用 \footnote 并不能正确生成脚注。我们可以分两步进行：
+ 先使用 \footnotemark 为脚注计数；
+ 再在合适的位置用 \footnotetext 生成脚注。

#+BEGIN_SRC latex
\begin{tabular}{l}
\hline
“天地玄黄，宇宙洪荒。日月盈昃，辰宿列张。” \footnotemark \\
\hline
\end{tabular}
\footnotetext{表格里的名句出自《千字文》}
#+END_SRC

*** 表格

排版表格最基本的 tabular 环境用法为：

#+BEGIN_SRC latex
\begin{tabular}{column-spec}
item1  & item2  & . . . \\
\hline
item1  & item2  & . . . \\
\end{tabular}
#+END_SRC

其中 column-spec 是列格式标记； & 用来分隔单元格； \\ 用来换行； \hline 用来在行与行之间绘制横线。
tabular 环境一般会放置在 table 浮动体环境中，并用 \caption 命令加标题。

*** 图片

LATEX 本身不支持插图功能，需要由 graphicx 宏包辅助支持。使用 latex + dvipdfmx 编译命令时，调用
graphicx 宏包时要指定 dvipdfmx 选项；而使用 pdflatex 或 xelatex 命令编译时不需要。

xelatex 原生支持 .pdf / .eps 格式的矢量图，以及 .jpg / .png / .bmp 格式的位图；latex 和 pdflatex 则
需要依赖其他的宏包来支持。

在调用了 graphicx 宏包以后，就可以使用 \includegraphics 命令加载图片了。

#+BEGIN_SRC latex
\usepackage{graphicx}

% 声明一个或多个图片文件存放的目录，
% 使用这些目录里的图片时可不用写路径
% 图片放在 figures 子目录下，标志放在 logo 子目录下
\graphicspath{{figures/}{logo/}}

% options 支持 key=value 形式赋值
\includegraphics[options]{filename}
#+END_SRC

| options 参数  | 含义                            |
|---------------+---------------------------------|
| width=width   | 将图片缩放到宽度为 width        |
| height=height | 将图片缩放到高度为 height       |
| scale=scale   | 将图片相对于原尺寸缩放 scale 倍 |
| angle=angle   | 令图片逆时针旋转 angle 度       |


*** 浮动体

内容丰富的文章或者书籍往往包含许多图片和表格等内容。这些内容的尺寸往往太大，导致分页困难。 LATEX 为
此引入了浮动体的机制，令大块的内容可以脱离上下文，放置在合适的位置。

LATEX 预定义了两类浮动体环境 figure 和 table。习惯上 figure 里放图片， table 里放表格，但并没有严格
限制，可以在任何一个浮动体里放置文字、公式、表格、图片等等任意内容。

以 table 环境的用法举例， figure 同理：

#+BEGIN_SRC latex
\begin{table}[placement]
. . .
\end{table}
#+END_SRC

placement 参数：

| h   | 当前位置（代码所处的上下文） |
| t   | 顶部                         |
| b   | 底部                         |
| p   | 单独成页                     |
| '!' | 在决定位置时忽视限制         |

placement 参数提供了一些符号用来表示浮动体允许排版的位置，如 hbp 允许浮动体排版在当前位置、底部或者
单独成页。 table 和 figure 浮动体的默认设置为 tbp。排版位置的选取与参数里符号的顺序无关， LATEX 总是
以 h-t-b-p 的优先级顺序决定浮动体位置。也就是说 [!htp] 和 [ph!t] 没有区别。

*双栏排版环境* 下， LATEX 提供了 table* 和 figure* 环境用来排版跨栏的浮动体。它们的用法与 table 和
figure 一样，不同之处为双栏的 placement 参数只能用 tp 两个位置。

浮动体的位置选取受到先后顺序的限制。如果某个浮动体由于参数限制、空间限制等原因在当前页无法放置，就要
推迟到之后处理，并使得之后的同类浮动体一并推迟。

\clearpage 命令会在另起一页之前，先将所有推迟处理的浮动体排版成页，此时 htbp 等位置限制被完全忽略。

float 宏包为浮动体提供了 H 位置参数，不与 htbp 及 ! 混用。使用 H 位置参数时，会取消浮动机制，将浮动
体视为一般的盒子插入当前位置。这在一些特殊情况下很有用（如使用 multicol宏包排版分栏内容的时候），但
尺寸过大的浮动体可能使得分页比较困难。

图表等浮动体提供了 \caption 命令加 *标题* ，并且自动给浮动体编号：

#+BEGIN_SRC latex
\caption{...}
#+END_SRC

\caption 的用法非常类似于 \section 等命令，可以用带星号的命令 \caption* 生成不带编号的标题，也可以使
用带可选参数的形式 \caption[...]{...}，使得在目录里使用短标题。\caption 命令之后还可以紧跟 \label 命
令标记交叉引用。\caption 生成的标题形如 "Figure 1: ..."（figure 环境）或 "Table 1: ..."（table 环境）。
可通过修改 \figurename 和 \tablename 的内容来修改标题的前缀。标题样式的定制功能由 caption 宏包提供，
详见该宏包的帮助手册。

table 和 figure 两种浮动体分别有各自的生成目录的命令：

#+BEGIN_SRC latex
\listoftables
\listoffigures
#+END_SRC


*并排和字图表：* 我们时常有在一个浮动体里面放置多张图的用法。最简单的用法就是直接并排放置，也可以通
过分段或者换行命令 \\ 排版多行多列的图片。

#+BEGIN_SRC latex
\begin{figure}[htbp]
\centering
\includegraphics[width=...]{...}
\qquad
\includegraphics[width=...]{...} \\[..pt]
\includegraphics[width=...]{...}
\caption{...}
\end{figure}
#+END_SRC

由于标题是横跨一行的，用 \caption 命令为每个图片单独生成标题就需要借助 \parbox 或者 minipage 环境，
将标题限制在盒子内。

#+BEGIN_SRC latex
\begin{figure}[htbp]
\centering
\begin{minipage}{...}
\centering
\includegraphics[width=...]{...}
\caption{...}
\end{minipage}
\qquad
\begin{minipage}{...}
\centering
\includegraphics[width=...]{...}
\caption{...}
\end{minipage}
\end{figure}
#+END_SRC

当我们需要更进一步，给每个图片定义小标题时，就要用到 subfig 宏包的功能了。详细的用法请参考 subfig 宏
包的帮助文档。

#+BEGIN_SRC latex
\begin{figure}[htbp]
\centering
\subfloat[...]{\label{sub-fig-1}% 为子图加交叉引用
\begin{minipage}{...}
\centering
\includegraphics[width=...]{...}
\end{minipage}
}
\qquad
\subfloat[...]{%
\begin{minipage}{...}
\centering
\includegraphics[width=...]{...}
\end{minipage}
}
\caption{...}
\end{figure}
#+END_SRC

*** 章节-目录-标题页

一篇结构化的、条理清晰文档一定是层次分明的，通过不同的命令分割为章、节、小节。 LATEX的三个标准文档类
article、 report 和 book 提供了一系列命令，用以划分章节、生成章节标题并自动编号，还向目录中添加条目，
并影响页眉页脚的内容。LATEX 及标准文档类并未提供为 \section 等章节命令定制格式的功能，这一功能由
titlesec 宏包提供，详情请参考宏包的帮助手册。

+ article 文档类带编号的层级为 \section 、\subsection 、\subsubsection 三级
+ report/book 文档类带编号的层级为 \chapter 、\section 、\subsection 三级

#+BEGIN_SRC latex
\part{title} % 将整个文档分割为大的分块，不影响 \chapter 或 \section 等的编号
\chapter{title} % 只在 book 和 report 中有定义
\section{title}
\section[short title]{title} % 标题中使用 title，目录、页眉页脚中使用 short title
\section*{title} % 标题不带编号，也不生成目录项和页眉页脚
\subsection{title}
\subsubsection{titile}
\paragraph{title} % 无论是否带 * 都不带编号，\subparagraph 同样
\subparagraph{title}
#+END_SRC

在 LATEX 中生成 *目录* 非常容易，只需在合适的地方使用命令：\tableofcontents 这个命令会生成单独的一个
章节，标题默认为 “Contents”，可定制。正确生成目录项，一般需要 *编译两次源代码* 。有时我们使用了
\chapter* 或 \section* 这样不生成目录项的章节标题命令，而又想手动生成该章节的目录项，可以在标题命令
后面使用：\addcontentsline{toc}{level}{title} ，其中 level 为章节层次 chapter 或 section 等， title
为出现于目录项的章节标题。

#+BEGIN_SRC latex
\tableofcontent
\addcontentsline{toc}{level}{title}
#+END_SRC

所有标准文档类都提供了一个 \appendix 命令将正文和附录分开，使用 \appendix 后，最高一级章节改为使用拉
丁字母编号，从 A 开始。

#+BEGIN_SRC latex
\appendix
#+END_SRC

book 文档类还提供了前言、正文、后记结构的划分命令：

#+BEGIN_SRC latex
\frontmatter % 前言部分，页码为小写罗马字母格式；其后的 \chapter 不编号。
\mainmatter % 正文部分，页码为阿拉伯数字格式，从 1 开始计数；其后的章节编号正常。
\backmatter % 后记部分，页码格式不变，继续正常计数；其后的 \chapter 不编号。
#+END_SRC


LATEX 支持生成简单的标题页。在 \title、 \author 等命令内可以使用 \thanks 命令生成标题页的脚注，用 \and 隔开多
个人名。

#+BEGIN_SRC latex
\title{title} % 必须
\author{author} % 必须
\author{Mary\thanks{E-mail:*****@***.com}
  \and Ted\thanks{Corresponding author}
  \and Louis}
\date{\today} % 可选

\maketitle % 设定完信息后，使用该命令生成标题页
#+END_SRC

*** 盒子

盒子是 LATEX 排版的基础单元：每一行是一个盒子，里面的文字从左到右依次排列；每一页也是一个盒子，各行
文字从上到下依次排布。LATEX 提供了一些命令让我们生成一些有特定用途的盒子。

minipage 环境之被称为“迷你页”（Mini-page）。如果在 minipage 里使用 \footnote 命令，生成的脚注会出
现在盒子底部，编号是独立的，并且使用小写字母编号。


** 数学公式

AMS 宏集合是美国数学学会 (American Mathematical Society) 提供的对 LATEX 原生的数学公式排版的扩展，其
核心是 amsmath 宏包，对多行公式的排版提供了有力的支持。此外， amsfonts 宏包以及基于它的 amssymb 宏包
提供了丰富的数学符号； amsthm 宏包扩展了 LATEX 定理证明格式。

** 排版样式设定

*** 字体字号

LATEX 根据文档的逻辑结构（章节、脚注等）来选择默认的字体样式以及字号。可以使用命令修改，字体的各种属
性是相互独立的，这意味着用户可以改变字体的大小，而仍然保留字体原有的粗体或者斜体的特性。

*字体样式：* LATEX 提供了两组修改字体的命令，其中诸如 \bfseries 形式的命令将会影响之后所有的字符，如
果想要让它在局部生效，需要用花括号分组，也就是写成 {\bfseries text} 这样的形式；对应的 \textbf 形式
带一个参数，只改变参数内部的字体，更为常用。在公式中，不可以使用 \textbf 等命令。

| \rmfamily   | \textrm{...}     | roman 衬线字体（罗马字体） |
| \sffamily   | \testsf{...}     | sans serif 无衬线字体      |
| \ttfamily   | \texttt{...}     | typewrite 等宽字体         |
|             |                  |                            |
| \mdseries   | textmd{...}      | medium 中等（正常粗细）    |
| \bfseries   | textbf{...}      | blod 粗体                  |
|             |                  |                            |
| \upshape    | \textup{...}     | upright 直立体             |
| \itshape    | \testit{...}     | italic 意大利体            |
| \slshape    | \textsl{...}     | slanted 倾斜体             |
| \scshape    | \textsc{...}     | small caps                 |
|             |                  |                            |
| \em         | \emh{...}        | emphasized 强调，默认斜体  |
| \normalfont | \textnormal{...} | 默认字体                   |

#+BEGIN_SRC latex
{\small The small and \textbf{bold} Romans ruled}
{\Large all of great big {\itshape Italy}.}
#+END_SRC

*字号：* 字号命令实际大小依赖于所使用的文档类及其选项。使用字号命令的时候，通常也需要用花括号进行分
 组。


| \tiny         | tiny font        |
| \scriptsize   | very small font  |
| \footnoresize | quite small font |
| \small        | small font       |
| \normalsize   | normal font      |
| \large        | large font       |
| \Large        | larger font      |
| \LARGE        | very large font  |
| \huge         | huge             |
| \Huge         | largest          |

#+BEGIN_SRC latex
He likes {\LARGE large house {\small small cup} very much}.

% LATEX 提供了一个基础的命令 \fontsize 用于设定任意大小的字号
\fontsize{9.2pt}{基础行距} % 不知道基础行距怎样指定
% 一些老的宏包可能会报错，尽量使用上面已经定义的字号
#+END_SRC

无论切换粗体、斜体等等，以及如何改变字号，依然用着 LATEX默认的那套、由高德纳设计制作的 Computer
Modern 字体。有的人可能很喜欢 Times、 Palatino，或者更好看的字体。这些字体样式的自由设置在 LATEX 里
还不太容易。幸好大部分时候，许多字体宏包为我们完成了整套配置，我们可以在调用宏包之后，照常使用
\bfseries 或 \ttfamily 等我们熟悉的命令。

*字体编码* 对于 LATEX 用户来讲是一个比较难懂的概念。常见的正文字体编码有 OT1 和 T1 等。 

xelatex 编译命令能够支持直接调用系统安装的 .ttf 或 .otf 格式字体。xelatex 命令下支持用户调用字体的宏
包是 fontspec。宏包提供了几个设置全局字体的命令，其中 *font name 使用字体的文件名（带扩展名）* 或者
字体的英文名称。 font features 用来手动配置对应的粗体或斜体，还能配置字体本身的各种特性。推荐可选参
数放到必选参数后面。

#+BEGIN_SRC latex
\setmainfont{font name}[font features]
\setsansfont{font name}[font features]
\setmonofont{font name}[font features]

\setsansfont{Arial}[BoldFont={Arial Bold}, ItalicFont={Arial Italic}]
#+END_SRC

注意：fontspec 宏包会覆盖数学字体设置。需要调用数学字体宏包时，应当在调用 fontspec 宏包时指定
no-math 选项。 fontspec 宏包可能被其它宏包或文档类（如 xeCJK、 ctex 文档类）自动调用时，则在文档开头
的 \documentclass 命令里指定 no-math选项。

#+BEGIN_SRC latex
\setCJKmainfont[font features]{font name}
\setCJKsansfont[font features]{font name}
\setCJKmonofont[font features]{font name}
#+END_SRC


*** 页面参数
利用 geometry 宏包设置页面参数

#+BEGIN_SRC latex
% 调用 geometry 宏包然后用其提供的 \geometry 命令设置页面参数：
\usepackage{geometry}
\geometry{geometry-settings}

% 将参数指定为宏包的选项：
\usepackage[geometry-settings]{geometry}
% 其中 geometry-settings 多以 key=value 的形式组织

% 符合 Microsoft Word 习惯的页面设定是 A4 纸张，上下边距 1 英寸，左右边距 1.25 英寸
\usepackage[left=1.25in,right=1.25in,top=1in,bottom=1in]{geometry}
% 或者
\usepackage[hmargin=1.25in,vmargin=1in]{geometry}

% 需要设定周围的边距一致为 1.25 英寸
\usepackage[margin=1.25in]{geometry}

% 对于书籍等双面文档，习惯上奇数页右边、偶数页左边留出较多的页边距，而书脊一侧的奇
% 数页左边、偶数页右边页边距较少。设定如下：
\usepackage[inner=1in,outer=1.25in]{geometry}

% geometry 宏包本身也能够修改纸张大小、页眉页脚高度、边注宽度等等参数。
#+END_SRC


*** 分栏

LATEX 支持简单的单栏或双栏排版。标准文档类的全局选项 onecolumn、 twocolumn 可控制全文分单栏或双栏排
版。 LATEX 也提供了切换单/双栏排版的命令：

#+BEGIN_SRC latex
\onecolumn
\twocolumn[one-column top material]
#+END_SRC

\twocolumn 支持带一个可选参数，用于排版双栏之上的一部分单栏内容。切换单/双栏排版时总是会另起一页
（\clearpage）。在双栏模式下使用 \newpage 会换栏而不是换页； \clearpage 则能够换页。双栏排版时每一栏
的宽度为 \columnwidth，它由 \textwidth 减去 \columnsep 的差除以 2 得到。两栏之间还有一道竖线，宽度为
\columnseprule，默认为零，也就是看不到竖线。

**** multicol
multicol 宏包提供了简单的 multicols 环境，能够在一页之中切换单栏/多栏，也能处理跨页的分栏，且各栏的
高度分布平衡。但代价是在 multicols 环境中无法正常使用 table 和 figure 等浮动体环境，它会直接让浮动体
丢失。 multicols 环境中只能用跨栏的 table* 和 figure* 环境，或者用 float 宏包提供的 H 参数固定浮动体
的位置。

#+BEGIN_SRC latex
\begin{multicols}{3}
...
\end{multicols}
#+END_SRC


*** 页眉页脚

LATEX 中提供了命令 \pagestyle 来修改页眉页脚的样式：\thispagestyle 只影响当页的页眉页脚样式：


#+BEGIN_SRC latex
\pagestyle{page-style}
\thispagestyle{page-style}
#+END_SRC

page-style 参数为样式的名称，在 LATEX 里预定义了四类样式

**** fancyhdr 宏包

fancyhdr 自定义了样式名称 fancy。使用 fancyhdr 宏包定义页眉页脚之前，通常先用 \pagestyle{fancy} 调
用这个样式。在 fancyhdr 中定义页眉页脚的命令为：

#+BEGIN_SRC latex
\fancyhead[position]{...}
\fancyfoot[position]{...}
#+END_SRC

其中 position 为 L（左） /C（中） /R（右）以及与 O（奇数页） /E（偶数页）字母的组合。

#+BEGIN_SRC latex
% 导言区部分
\usepackage{fancyhdr}
\pagestyle{fancy}
\renewcommand{\chaptermark}[1]{\markboth{#1}{}}
\renewcommand{\sectionmark}[1]{\markright{\thesection\ #1}}
\fancyhf{} % 清空当前的页眉页脚
\fancyfoot[C]{\bfseries\thepage}
\fancyhead[LO]{\bfseries\rightmark}
\fancyhead[RE]{\bfseries\leftmark}
\renewcommand{\headrulewidth}{0.4pt} % 注意不用 \setlength
\renewcommand{\footrulewidth}{0pt}
#+END_SRC


*** 参考文献

BIBTEX 是最为流行的参考文献数据组织格式之一。它的出现让我们摆脱手写参考文献条目的麻烦。我们还可以通
过参考文献样式的支持，让同一份 BIBTEX 数据库生成不同样式的参考文献列表。BIBTEX 数据库以 .bib 作为扩
展名，其内容是若干个文献条目，每个条目的格式为：

#+BEGIN_SRC latex
@type{citation,
key1 = {value1},
key2 = {value2},
. . .
}
#+END_SRC

其中 type 为文献的类别，如 article 为学术论文， book 为书籍， incollection 为论文集中的某一篇，等
等。 citation 为 \cite 命令使用的文献标签。在 citation 之后为条目里的各个数据项，以 key =
{value} 的形式组织。

*** 索引



*** 颜色


LATEX 原生不支持颜色，它依赖 color 宏包或者 xcolor 宏包，给 PDF 输出生成颜色的特殊指令。

调用 color 或 xcolor 宏包后，我们就可以用如下命令切换颜色：

#+BEGIN_SRC latex
\color[color-mode]{code}
\color{color-name}
#+END_SRC

颜色的表达方式有两种，其一是使用色彩模型和色彩代码，代码用 0 ∼ 1 的数字代表成分的比例。 color 宏包支
持 rgb、 cmyk 和 gray 模型， xcolor 支持更多的模型如 hsb 等。其二是直接使用名称代表颜色，前提是已经
定义了颜色名称（没定义的话会报错）：

#+BEGIN_SRC latex
\large\sffamily
{\color[gray]{0.6} 60\% 灰色} \\
{\color[rgb]{0,1,1} 青色}

{\color{red} 红色} \\
{\color{blue} 蓝色}

% 通过命令自定义颜色名称，注意这里的 color-mode 是必选参数：
\definecolor{color-name}{color-mode}{code}
#+END_SRC

如果调用 color 或 xcolor 宏包时指定 dvipsnames 选项，就有额外的 68 种颜色名称可用。xcolor 宏包还支持
通过指定其它选项载入更多颜色名称。


*** 超链接

hyperref 宏包涉及到的链接遍布 LATEX 的每一个角落：目录、引用、脚注、索引、参考文献等等都被封装成链接。
但这也使得它与其它宏包的冲突机会大大增加，虽然宏包已经尽力解决各方面的兼容性，但仍不能面面俱到。为减
少冲突的可能性，习惯上将 hyperref 宏包放在其它宏包之后调用。
